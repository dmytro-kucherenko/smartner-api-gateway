AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  SwaggerVersion:
    Type: String
    Default: "1.0"

  SwaggerTitle:
    Type: String
    Default: "Smartner API Specification"

  GlobalApiVersion:
    Type: String
    Default: v1

  GlobalApiTokenAuthorizationHeader:
    Type: String
    Default: Authorization

  GlobalApiTokenAuthorizationSchema:
    Type: String
    Default: "^[A-Za-z0-9-_=]+$"

  GlobalApiServicePassthroughBehavior:
    Type: String
    Default: when_no_match

Resources:
  GlobalApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Global Api Gateway
      StageName: !Ref GlobalApiVersion
      Auth:
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !ImportValue AuthorizerFunctionArn
            Identity:
              Header: Cookie
      DefinitionBody:
        openapi: 3.0.1
        info:
          version: !Ref SwaggerVersion
          title: !Ref SwaggerTitle
        schemes:
          - https

        components:
          securitySchemes:
            TokenAuthorizer:
              type: apiKey
              in: cookie
              name: !Ref GlobalApiTokenAuthorizationHeader
              x-amazon-apigateway-authorizer:
                type: token
                authorizerUri: !Sub
                  - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunctionArn}/invocations'
                  - AuthorizerFunctionArn: !ImportValue AuthorizerFunctionArn
                authorizerCredentials: !Sub
                  - 'arn:aws:iam::${AWS::AccountId}:role/${AuthorizerRoleArn}'
                  - AuthorizerRoleArn: !ImportValue AuthorizerRoleArn
                authorizerResultTtlInSeconds: 300
                identityValidationExpression: !Ref GlobalApiTokenAuthorizationSchema

        x-amazon-apigateway-gateway-responses:
          ACCESS_DENIED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            responseTemplates:
              application/json: |
                {
                  "status": 401,
                  "message": "$context.authorizer.error"
                }
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            responseTemplates:
              application/json: |
                {
                  "status": 401,
                  "message": "cookie required"
                }

        paths:
          /user/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - TokenAuthorizer: []
              x-amazon-apigateway-integration:
                type: http_proxy
                connectionType: VPC_LINK
                connectionId: !ImportValue LoadBalancerLinkID
                httpMethod: ANY
                uri: !Sub
                  - http://${LoadBalancerDNS}:${UsersECSServicePort}/user/{proxy}
                  - LoadBalancerDNS: !ImportValue LoadBalancerDNS
                    UsersECSServicePort: !ImportValue UsersECSServicePort
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                  integration.request.header.userId: context.authorizer.userId
                passthroughBehavior: !Ref GlobalApiServicePassthroughBehavior

          /user/swagger/{proxy+}:
            x-amazon-apigateway-any-method:
              security: []
              x-amazon-apigateway-integration:
                type: http_proxy
                connectionType: VPC_LINK
                connectionId: !ImportValue LoadBalancerLinkID
                httpMethod: ANY
                uri: !Sub
                  - http://${LoadBalancerDNS}:${UsersECSServicePort}/user/swagger/{proxy}
                  - LoadBalancerDNS: !ImportValue LoadBalancerDNS
                    UsersECSServicePort: !ImportValue UsersECSServicePort
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                passthroughBehavior: !Ref GlobalApiServicePassthroughBehavior

Outputs:
  ApiGatewayID:
    Description: "API ID"
    Value: !Ref GlobalApiGateway
    Export:
      Name: ApiGatewayID

  ApiHost:
    Description: "API endpoint"
    Value: !Sub "${GlobalApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: ApiHost

  ApiVersion:
    Description: "API version"
    Value: !Ref GlobalApiVersion
    Export:
      Name: ApiVersion
